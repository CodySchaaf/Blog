{"version":3,"sources":["webpack:///./src/templates/blog-list-template.js"],"names":["shiftIn","keyframes","StyledList","StyledPaginator","StyledDiv","BlogIndex","posts","data","allMdx","edges","pageContext","currentPage","numPages","theme","useTheme","isFirst","isLast","prevPage","toString","nextPage","title","map","post","node","key","id","to","fields","slug","frontmatter","date","excerpt","css","color","palette","text","secondary","rel","Array","from","length","_","i","blogIndex"],"mappings":"ycAQA,IAAMA,EAAUC,YAAH,KAYPC,EAAU,oFAKCF,EALD,oBASVG,EAAe,+JAUfC,EAAS,kHAiEAC,UA3DG,SAAC,GAKZ,IAHcC,EAGf,EAJJC,KACEC,OAAUC,MAGR,IADJC,YAAeC,EACX,EADWA,YAAaC,EACxB,EADwBA,SAEtBC,EAAQC,cAERC,EAA0B,IAAhBJ,EACVK,EAASL,IAAgBC,EACzBK,EAAWN,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGO,WAC3DC,GAAYR,EAAc,GAAGO,WAEnC,OACE,YAACd,EAAD,KACE,YAAC,IAAD,CAAKgB,MAAM,SACX,+BACA,YAAClB,EAAD,KACGI,EAAMe,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACT,kBAAIC,IAAKF,EAAKG,IACZ,YAAC,OAAD,CAAMC,GAAIJ,EAAKK,OAAOC,MACpB,sBAAKN,EAAKO,YAAYT,QAExB,yBAAQE,EAAKO,YAAYC,MACzB,qBAAIR,EAAKS,cAIf,YAAC5B,EAAD,KACIY,EAKA,oBAAMiB,IAAG,YAAE,CAAEC,MAAOpB,EAAMqB,QAAQC,KAAKC,aAAvC,cAJA,YAAC,OAAD,CAAMV,GAAIT,EAAUoB,IAAI,QAAxB,mBAMDC,MAAMC,KAAK,CAAEC,OAAQ5B,IAAY,SAAC6B,EAAGC,GAAJ,OAChC/B,IAAgB+B,EAAI,EAClB,oBAAMlB,IAAG,qBAAsBkB,EAAI,GAAKV,IAAG,YAAE,CAAEC,MAAOpB,EAAMqB,QAAQC,KAAKC,aACtEM,EAAI,GAGP,YAAC,OAAD,CAAMlB,IAAG,qBAAsBkB,EAAI,GAAKhB,GAAE,KAAY,IAANgB,EAAU,GAAKA,EAAI,IAChEA,EAAI,MAIT1B,EAKA,oBAAMgB,IAAG,YAAE,CAAEC,MAAOpB,EAAMqB,QAAQC,KAAKC,aAAvC,eAJA,YAAC,OAAD,CAAMV,GAAIP,EAAUkB,IAAI,QAAxB,aAaH,IAAMM,EAAS","file":"component---src-templates-blog-list-template-js-68d95a91af07bee0310e.js","sourcesContent":["import React from 'react';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport styled from '@emotion/styled';\nimport { keyframes } from '@emotion/core';\nimport { useTheme } from 'emotion-theming';\n\nimport SEO from '../components/seo';\n\nconst shiftIn = keyframes`\n  from {\n    transform: translate3d(-50px,0px,0);\n    opacity: 0;\n  }\n  \n  to {\n    transform: translate3d(0,0,0);\n    opacity: 1;\n  }\n`;\n\nconst StyledList = styled.ul`\n  list-style: none;\n  margin-left: 0;\n\n  li {\n    animation: ${shiftIn} 400ms ease-in;\n  }\n`;\n\nconst StyledPaginator = styled.div`\n  display: flex;\n  margin-top: auto;\n  justify-content: center;\n  > * {\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n`;\n\nconst StyledDiv = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst BlogIndex = ({\n  data: {\n    allMdx: { edges: posts },\n  },\n  pageContext: { currentPage, numPages },\n}) => {\n  const theme = useTheme();\n\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <StyledDiv>\n      <SEO title=\"Home\" />\n      <h1>Posts</h1>\n      <StyledList>\n        {posts.map(({ node: post }) => (\n          <li key={post.id}>\n            <Link to={post.fields.slug}>\n              <h2>{post.frontmatter.title}</h2>\n            </Link>\n            <small>{post.frontmatter.date}</small>\n            <p>{post.excerpt}</p>\n          </li>\n        ))}\n      </StyledList>\n      <StyledPaginator>\n        {!isFirst ? (\n          <Link to={prevPage} rel=\"prev\">\n            ← Previous Page\n          </Link>\n        ) : (\n          <span css={{ color: theme.palette.text.secondary }}>← Previous</span>\n        )}\n        {Array.from({ length: numPages }, (_, i) =>\n          currentPage === i + 1 ? (\n            <span key={`pagination-number${i + 1}`} css={{ color: theme.palette.text.secondary }}>\n              {i + 1}\n            </span>\n          ) : (\n            <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n              {i + 1}\n            </Link>\n          ),\n        )}\n        {!isLast ? (\n          <Link to={nextPage} rel=\"next\">\n            Next →\n          </Link>\n        ) : (\n          <span css={{ color: theme.palette.text.secondary }}>Next Page →</span>\n        )}\n      </StyledPaginator>\n    </StyledDiv>\n  );\n};\n\nexport default BlogIndex;\n\nexport const blogIndex = graphql`\n  query blogIndex($skip: Int!, $limit: Int!) {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }, limit: $limit, skip: $skip) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"MMMM Do, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}