{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2015-09-28-button-loaders/","result":{"data":{"mdx":{"id":"34360344-13e0-59e6-b5df-febeae66286d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Button Loaders\",\n  \"date\": \"2015-09-29T02:44:26.000Z\",\n  \"comments\": true,\n  \"tags\": [\"angular\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This post will detail how to build a simple button loader using AngularJs.\"), mdx(\"iframe\", {\n    height: \"265\",\n    style: {\n      \"width\": \"100%\"\n    },\n    scrolling: \"no\",\n    title: \"Angular Button Loader\",\n    src: \"https://codepen.io/codyschaaf/embed/pjNLEQ?height=265&theme-id=light&default-tab=css,result\",\n    frameBorder: \"no\",\n    loading: \"lazy\",\n    allowtransparency: \"true\",\n    allowFullScreen: true\n  }, \"See the Pen \", mdx(\"a\", {\n    href: \"https://codepen.io/codyschaaf/pen/pjNLEQ\"\n  }, \"Angular Button Loader\"), \" by Cody Schaaf (\", mdx(\"a\", {\n    href: \"https://codepen.io/codyschaaf\"\n  }, \"@codyschaaf\"), \") on \", mdx(\"a\", {\n    href: \"https://codepen.io\"\n  }, \"CodePen\"), \".\"), mdx(\"p\", null, \"This directive allows for a busy state to quickly and simply be applied to a form button in an Angular app. To use this directive\\ndefine a button as you normally would, and then apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"btn-busy\"), \" directive with the scope variable that controls the\\ntoggle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"btn-busy=\\\"isProcessing\\\"\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"example usage\",\n    \"example\": true,\n    \"usage\": true\n  }), \"<button ng-click=\\\"submit()\\\" btn-busy=\\\"isSubmitting\\\" ng-disabled=\\\"isSubmitting\\\">Submit</button>\\n\")), mdx(\"p\", null, \"Optionally you can add an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.angularjs.org/api/ng/directive/ngDisabled\"\n  }), \"ng-disabled\"), \"\\nto prevent additional clicks while the form is processing. Typically I'm against ng-disabled, but I think this\\nis a great use case for it.\"), mdx(\"p\", null, \"#btnBusy Directive\"), mdx(\"p\", null, \"For the directive definition we have a template, and an isolate scope which will get its busy attribute from the directive definition.\\nBy having \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"busy: \\\"=btnBusy\\\"\"), \" in the scope definition angular will look for btn-busy on the directive instance (seen above),\\nbut it will make the variable available for usage in the directive's template via the busy variable for clarity. This allows our\\ndirective to be compact and not require an additional attribute.\"), mdx(\"p\", null, \"Finally we want \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.angularjs.org/api/ng/directive/ngTransclude\"\n  }), \"transclude\"), \"\\ntrue to be set. Transclude can be a bit scary at first, but all it does is it allows for the directive\\nto extract the content in the directive instance (markup that is between the opening and closing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" tags, which is 'Submit' in the example above), and\\ninject that at some point into the directive's template. This point is specified by the ng-transclude tag.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"btnBusy directive definition\",\n    \"btnBusy\": true,\n    \"directive\": true,\n    \"definition\": true\n  }), \"myApp.directive(\\\"btnBusy\\\", () => {\\n    return {\\n        template: ...,\\n        transclude: true,\\n        scope: {\\n            busy: \\\"=btnBusy\\\"\\n        },\\n        restrict: \\\"A\\\",\\n    };\\n});\\n\\n\")), mdx(\"p\", null, \"For the directive template we start with a containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \", this will be the element that gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: relative\"), \", and\\nwill allow the button to remain at the same width as it was when it had text in it, before we replaced it with a spinner.\"), mdx(\"p\", null, \"If we just allowed Angular's default hidden state the text would get a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none\"), \" and the button would collapse down\\nto the size of the spinner. This way we get a much more polished experience, as well as a nice directive to hide all\\nthe logic that would be a pain to repeat every time.\"), mdx(\"p\", null, \"Inside this container element we place a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" with ng-transclude, remember this is the place holder for our injected content.\\nThis is the element that allows our directive to be reusable with any content. We add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng-hide='busy'\"), \" so that we can control the\\nstate of button. When busy is true the content will be hidden.\"), mdx(\"p\", null, \"The busy container will hold the busy animation, and will get a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: absolute\"), \" so that it can be positioned to not take up space,\\nand will be placed on top of the content. When the directive switches to its busy state the content will be hidden, but will continue to\\ntake up space. This will prevent the button from collapsing, but will force us to absolutely position the busy animation on top\\nof the content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"btnBusy template\",\n    \"btnBusy\": true,\n    \"template\": true\n  }), \"<div>\\n  <div ng-transclude ng-hide=\\\"busy\\\" class=\\\"btn-busy-text\\\"></div>\\n  <div class=\\\"busy-container\\\">\\n    <div class=\\\"busy\\\" ng-show=\\\"busy\\\"></div>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"All together we have:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"btnBusy directive definition\",\n    \"btnBusy\": true,\n    \"directive\": true,\n    \"definition\": true\n  }), \"myApp.directive('btnBusy', () => {\\n  return {\\n    template: `<div>\\n                      <div ng-transclude ng-hide=\\\"busy\\\" class=\\\"btn-busy-text\\\"></div>\\n                      <div class=\\\"busy-container\\\">\\n                          <div class=\\\"busy\\\" ng-show=\\\"busy\\\"></div>\\n                      </div>\\n                  </div>`,\\n    transclude: true,\\n    scope: {\\n      busy: '=btnBusy',\\n    },\\n    restrict: 'A',\\n  };\\n});\\n\")), mdx(\"p\", null, \"For the css, we need to define a processing animation. I have chosen a spinner because it fits nicely, but you can substitute\\nyour favorite loading state.\"), mdx(\"p\", null, \"First we have the keyframe definition, then inside our directive name space we have directive specific styles.\"), mdx(\"p\", null, \"We have the containing div with a relative position, this allows the position absolute to be positioned relative to this\\nparent element.\"), mdx(\"p\", null, \"The busy class gets all of the animation styles including the animation definition. Notice \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"infinite\"), \" which allows the\\nanimation to repeat itself. We define a boarder as well as a border radius to get our circular spinner.\\nWe also need to override the animation with a 0s animation once ng-hide-add class is added to the element, but only if you have\\nthe ngAnimate module installed.\"), mdx(\"p\", null, \"For a quick aside on animations which only apply if you have the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.angularjs.org/api/ngAnimate\"\n  }), \"ngAnimate\"), \" module installed,\\nonce the scope variable becomes true for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.angularjs.org/api/ng/directive/ngHide\"\n  }), \"ng-hide\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.angularjs.org/api/ng/directive/ngHide#a-note-about-animations-with-nghide-\"\n  }), \"angular will apply an \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ng-hide-add\"), \" class as well as an \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"ng-animate\")), \".\\nAfter this class is added it will scan the element for any transitions or animations. It will store the specified time, and then\\nit will add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng-hide-add-active\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng-hide\"), \" classes. Once these classes are applied it will wait for the above\\nstored time until it removes the element from view by removing the ng-animate class which was blocking the affects of ng-hide.\\nIt does this because it assumes the applied animation or transition is meant to transition the element out of view.\\nTypically this is exactly what we want, but for this use case we don't want the element to remain in view for an extra\\n.8 seconds, so we override it to 0 seconds before angular does its check.\"), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"btn-busy-text\"), \" class we need to override the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng-hide\"), \" styles. The default styles apply a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none !important\"), \"\\nand would cause the element to disappear and collapse the button. We want it to remain a block level element even when hidden so we add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: block !important;\"), \"\\nNote the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!important\"), \" which is required to override Angular's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!important\"), \". We also give it an opacity of 0 so that it appears hidden.\"), mdx(\"p\", null, \"Then we give the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"busy-container\"), \" an absolute position. Then we position it and give it\\na full width so it appears centered.\"), mdx(\"p\", null, \"I have also added a default height and width, as well as a larger version, these will be specific to your site's button dimensions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\",\n    \"metastring\": \"btnBusy scss\",\n    \"btnBusy\": true,\n    \"scss\": true\n  }), \"@keyframes rotate-360 {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n[btn-busy] {\\n  > div {\\n    position: relative;\\n  }\\n  .busy {\\n    animation: rotate-360 0.8s infinite linear;\\n    border: 1px solid slategray;\\n    border-radius: 50%;\\n    border-right-color: midnightblue;\\n    border-top-color: midnightblue;\\n    display: inline-block;\\n    &.ng-hide-add {\\n      animation: none 0s; //allow for quick removal (ignore .8 second animation from rotate-360)\\n    }\\n  }\\n  .btn-busy-text {\\n    &.ng-hide {\\n      display: block !important; //override angular's default\\n      opacity: 0;\\n    }\\n  }\\n  .busy-container {\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    width: 100%;\\n  }\\n  .busy {\\n    height: 20px;\\n    width: 20px;\\n  }\\n\\n  &.btn-busy-large .busy {\\n    height: 32px;\\n    width: 32px;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Finally to see it in action we can make a form and apply the directive to our submit button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"btnBusy in action\",\n    \"btnBusy\": true,\n    \"in\": true,\n    \"action\": true\n  }), \"<div ng-app=\\\"myApp\\\">\\n  <div ng-controller=\\\"Main as MainCtrl\\\" class=\\\"container\\\">\\n    <form name=\\\"timeForm\\\" class=\\\"form-inline\\\" novalidate>\\n      <h5>How long should we wait (ms)?</h5>\\n      <div class=\\\"form-group\\\">\\n        <input\\n          type=\\\"text\\\"\\n          class=\\\"input-s form-control\\\"\\n          name=\\\"time\\\"\\n          ng-model=\\\"MainCtrl.waitTime\\\"\\n          placeholder=\\\"time\\\"\\n          ng-required=\\\"true\\\"\\n        />\\n      </div>\\n\\n      <button\\n        class=\\\"btn btn-primary\\\"\\n        ng-click=\\\"MainCtrl.wait()\\\"\\n        btn-busy=\\\"MainCtrl.waiting\\\"\\n        ng-disabled=\\\"MainCtrl.waiting\\\"\\n      >\\n        Let's Wait!\\n      </button>\\n    </form>\\n  </div>\\n</div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Button Loaders","date":"September 29th, 2015","tags":["angular"]}}},"pageContext":{"id":"34360344-13e0-59e6-b5df-febeae66286d"}},"staticQueryHashes":["3649515864","3897982121","3897982121"]}