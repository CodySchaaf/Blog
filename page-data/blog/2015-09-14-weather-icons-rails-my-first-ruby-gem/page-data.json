{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2015-09-14-weather-icons-rails-my-first-ruby-gem/","result":{"data":{"mdx":{"id":"bfe36f01-66ae-5969-8205-aada0b2395bf","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Weather-Icons-Rails: My First Ruby Gem\",\n  \"date\": \"2014-05-11T02:09:01.000Z\",\n  \"comments\": true,\n  \"categories\": [\"CSS\", \"SASS\", \"Ruby On Rails\", \"Ruby\", \"Ruby Gems\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"First I want to give a huge thanks to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.twitter.com/artill\"\n  }), \"Lukas Bischoff\"), \"\\nfor designing this font, and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.helloerik.com/\"\n  }), \"Erik Flowers\"), \" who\\noriginally added the css to turn it into a web font, and finally the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/FortAwesome/font-awesome-sass\"\n  }), \"Font Awesome Sass\"), \" gem that\\nI used as a template for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://rubygems.org/gems/weather-icons-rails\"\n  }), \"Weather Icons Rails\"), \".\"), mdx(\"p\", null, \"I originally started this project because of the lack of an easy to use web\\nbased font that included weather icons. I had been working on my current\\nproject \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://earlyword.herokuapp.com/\"\n  }), \"EarlyWord\"), \", and was hoping to use\\nFont Awesome to add icons to my weather app. Sadly the only weather font they\\nhad was the download from the cloud icon. This wasn't going to be of any use if I\\nhoped to give the user an immediate sense if the weather through a small image.\\nWe wouldn't want users to think global warming had begun to cause data to fall\\nfrom the skies...I was then fortunate enough to find Erik Flowers work, which is\\ncomposed of some really \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Awesome\"), \" fonts.\"), mdx(\"p\", null, \"From here I ran into two problems. One was that my project didn't use Less, but\\ninstead used Sass. This was easily solvable by converting it to pure CSS and just\\nincluding that into the assets file. This prevented me from using any dynamic\\ncoloring, and would make adding any special calculations for affects on the\\nicons difficult. The second problem was the much larger amount of code that was needed\\nto support pure CSS, especially once all of the mix-ins were removed and all the dynamic\\nvariables set to their static values. Instead I decided to convert it into Sass\\nto work with the rest of my project.\"), mdx(\"p\", null, \"At this point I got carried away and decided to check out Font Awesome Sass,\\nand started working on a replica of it using these new fonts. It was surprisingly\\nsimple, especially once I discovered all of the commands rake provides to help with\\ngem manufacture. I added a bunch of ruby helper methods, and modularized the CSS into\\nsperate files. Using Sass I was able to create much more maintainable code using\\nvariables instead of hard coding all the CSS class prefixes.\"), mdx(\"p\", null, \"After converting everything to Sass, and still not being completed satisfied with\\nall of the code that now cluttered my assets folder, I packaged it into its own\\ngem. Now I hope that others will find it as useful as I did. I would love to hear\\nany suggestions on improving it. Still a work in progress, and will hopefully\\nfinish the test suit next. You can download the gem at\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://rubygems.org/gems/weather-icons-rails\"\n  }), \"Weather Icons Rails\"), \",\\nand see the source code over on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/CodySchaaf/weather-icons-rails\"\n  }), \"GitHub\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Weather-Icons-Rails: My First Ruby Gem","date":"May 11th, 2014"}}},"pageContext":{"id":"bfe36f01-66ae-5969-8205-aada0b2395bf"}},"staticQueryHashes":["3649515864","63159454"]}